/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        forty_two: forty_two {
            label = "ZM_forty_two";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp N4>
                , <&macro_press &kp N2>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp GRAVE    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5                           &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &kp BSPC
                &kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T                            &kp Y      &kp U      &kp I      &kp O     &kp P      &kp BACKSLASH
                &mt LCTL ESC &kp A      &kp S     &kp D     &kp F      &kp G          &mo RAISE         &kp H      &kp J      &kp K      &kp L     &kp SEMI   &kp RET
                &kp LSHIFT   &kp Z      &kp X     &kp C     &kp V      &kp B                            &kp N      &kp M      &kp COMMA  &kp DOT   &kp SLASH  &kp RSHIFT
                                                  &kp LGUI  &mo LOWER  &kp SPACE  &kp LCTL    &kp LALT  &kp SPACE  &mo LOWER  &kp RGUI
                >;
        };
        lower {
            bindings = <
                &kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)   &kp LS(N3)   &kp LS(N4)  &kp LS(N5)                              &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp MINUS         &kp EQUAL          &kp DEL
                &kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)   &kp LS(N3)   &kp LS(N4)  &kp LS(N5)                              &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
                &none          &none       &none        &none        &none       &none             &none                 &none       &none       &none       &none             &kp SINGLE_QUOTE   &kp RET
                &kp LSHIFT     &none       &none        &none        &none       &none                              &none       &none       &none       &none             &none              &kp RSHIFT
                                                        &none        &none       &kp SPACE     &none      &none          &kp SPACE   &none       &none
                >;
        };
        raise {
            bindings = <
                &kp GRAVE  &kp N1      &kp N2       &kp N3       &kp N4      &kp N5                            &kp N6   &kp N7     &kp N8        &kp N9            &kp N0             &kp BSPC
                &kp GRAVE  &kp N1      &kp N2       &kp N3       &kp N4      &kp N5                            &kp N6   &kp N7     &kp N8        &kp N9            &kp N0             &kp DEL
                &kp DEL    &kp F1      &kp F2       &kp F3       &kp F4      &kp F5           &trans           &kp F6   &kp MINUS  &kp KP_EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BSLH
                &kp LSHIFT &bt BT_CLR  &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_PRV  &bt BT_NXT                           &kp C_PP &kp C_MUTE &kp C_VOL_DN  &kp C_VOL_UP         &kp PG_DN          &none
                                           &none   &mo LOWER &kp LSHIFT   &trans    &trans     &none    &trans     &kp C_NEXT
                >;
        };
        adj {
            bindings = <
                &bootloader  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5                           &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &kp BSPC
                &kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T                            &kp Y      &kp U      &kp I      &kp O     &kp P      &kp DEL
                &mt LCTL ESC &kp A      &kp S     &kp D     &kp F      &kp G          &forty_two        &kp H      &kp J      &kp K      &kp L     &kp SEMI   &kp SQT
                &kp LSHIFT   &kp Z      &kp X     &kp C     &kp V      &kp B                            &kp N      &kp M      &kp COMMA  &kp DOT   &kp SLASH  &mt RSHIFT RET
                                                  &kp LALT  &trans     &kp SPACE  &kp LEFT   &kp RIGHT  &kp SPACE  &trans     &kp K_CMENU
                >;
        };
    };
};
